/*
 --------------------------------------------- MM LOAD MOVIEDATA SCHEMA PROCEDURE --------------------------------------------------------------
|                                                                                                                                               |
| Name: LoadMoviedata.sql                                                                                                                       |
| Created: Akos Ujvary                                                                                                                          |
|                                                                                                                                               |
| Steps:  0. Create STAGE.TMP_NODUPL_MOVIEDATA from STAGE.MOVIEDATA and delete records from MD schema where necessary based on input STAGE data.|                                                     
|         1. Load from STAGE.TMP_NODUPL_MOVIEDATA to STAGE.TMP_MOVIEDATA(correct format) and LOG.LOADING_ERROR(incorrect format)                |
|          1.1 TITLE_ALT data cleaning                                                                                                          |
|          1.2 Hun names fix for ACTORS, DIRECTORS, WRITERS                                                                                     |                  |                                                
|         2. Load from STAGE.TMP_MOVIEDATA to MOVIEDATA schema's tables                                                                         |
|         3. Truncate STAGE.MOVIEDATA table                                                                                                     |
|                                                                                                                                               |
| Last modified: 2023.04.01   v1.9 Fixing hun names 1.2                                                                                         |
|                2023.03.02   v1.8 Correction to duplication logging and handling                                                               |
|                2022.12.28   v1.7 Adding step 0, modify step 2 (deleting tmp_dupl_moviedata table) and update rating table with new movie_id   | 
|                2022.11.21   v1.6 (Adding RUN_DTTM to MOVIEDATA.MOVIE)                                                                         |
|                2022.11.20   v1.5 (Adding Release Date field)                                                                                  | 
|                2022.11.10   v1.4 (Creating backup of the current data, then truncate STAGE.MOVIEDATA table)                                   | 
|                2022.11.09   v1.3 (Deselect LOAD_ID from STAGE.MOVIEDATA during no. 1 step)                                                    |
|                2022.10.10   v1.2 (Modified input format)                                                                                      | 
|                2022.09.14   v1.1 (Actor weight)                                                                                               |
|                2022.08.22   TSQL migrating                                                                                                    |
|                2018.05.12   Creation (PostgreSQL)                                                                                             |
 -----------------------------------------------------------------------------------------------------------------------------------------------
*/ 

CREATE OR ALTER PROCEDURE control.LoadMoviedata
WITH EXECUTE AS CALLER
AS
BEGIN

/*--- Start Process ---*/
DECLARE @PROCESS_NAME VARCHAR(50);
SET @PROCESS_NAME= 'LoadMoviedata';
DECLARE @PROCESS_ID VARCHAR(10);
SELECT @PROCESS_ID=control.f_genprocessid(NEXT VALUE FOR LOG.SEQ_PROCESS_ID)
EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='START', @DETAIL='Start of LoadMoviedata procedure';

DECLARE @CNT_1 INTEGER;
DECLARE @CNT_2 INTEGER;
DECLARE @MSG VARCHAR(MAX);
/* So v1.6 */
DECLARE @PROCESS_TIMESTAMP DATETIME = CURRENT_TIMESTAMP;
/* Eo v1.6 */


BEGIN TRANSACTION
/* So v1.7 */
/*---------------------------------------  START - 0.  --------------------------------------------*/

TRUNCATE TABLE STAGE.TMP_NODUPL_MOVIEDATA;
INSERT INTO STAGE.TMP_NODUPL_MOVIEDATA
SELECT IMDB_ID, TITLE, TITLE_ALT, RELEASE_YEAR, GENRES, COUNTRY, ACTORS, DIRECTORS, WRITERS, IMDB_RATING, IMDB_VOTES, METASCORE, TOMATOMETER, TOMATO_USER_METER, TOMATO_USER_REVIEWS, /* So v1.2, 1.3 */ RELEASE_DATE, KEYWORDS, RUNTIME, PLOT, AWARDS, POSTER /* Eo v1.2, 1.3 */
FROM (SELECT 
  IMDB_ID,  
  TITLE, TITLE_ALT, RELEASE_YEAR, GENRES, COUNTRY, ACTORS, DIRECTORS, WRITERS, IMDB_RATING, IMDB_VOTES, METASCORE, TOMATOMETER, TOMATO_USER_METER, TOMATO_USER_REVIEWS, /* So v1.2, 1.3 */ RELEASE_DATE, KEYWORDS, RUNTIME, PLOT, AWARDS, POSTER /* Eo v1.2, 1.3 */
FROM MOVIEDATA.V_STAGE_MD_DUPLICATIONS
WHERE TYP='NEW' AND RNK = 1) INNER_1
/* LOADABLE ROWS WITH MORE DATA OR CORRECTION ROWS */

/* STAGE DUPLICATIONS - FAILED NEW data IN STAGE */
INSERT INTO LOG.LOADING_ERROR 
SELECT
  control.f_generrorid(NEXT VALUE FOR LOG.SEQ_ERROR_ID) as ERR_ID, 
    @PROCESS_ID AS PR_ID,
   'DUPLICATION Failed STAGE' AS ERR_TYPE,
   'Duplicated entity that is weaker than other STAGE record OR MD data (based on IMDB_ID)' AS ERR_MSG,
   'STAGE.MOVIEDATA' AS TABLE_SRC,
   'IMDB_ID' AS NATURE_KEY,
   IMDB_ID as NATURE_KEY_VALUE,
   'ROWTYPE' FAILED_COLUMNS,
   FAILED_COLUMN_VALUE,
   CURRENT_TIMESTAMP as RUN_DTTM
FROM 
(SELECT 
  IMDB_ID,  
  CONCAT_WS('|', RNK, TYP, LOAD_TYPE, TITLE, TITLE_ALT, RELEASE_YEAR, GENRES, COUNTRY, ACTORS, DIRECTORS, WRITERS, IMDB_RATING, IMDB_VOTES, METASCORE, TOMATOMETER, RELEASE_DATE, KEYWORDS, RUNTIME, PLOT, AWARDS, POSTER, TOMATO_USER_METER, TOMATO_USER_REVIEWS) as FAILED_COLUMN_VALUE 
FROM MOVIEDATA.V_STAGE_MD_DUPLICATIONS
WHERE TYP='NEW' AND RNK > 1) INNER_1
/* INCORRECT ROWS WITH LESS DATA FROM STAGE*/

SELECT @CNT_1=COUNT(*) FROM LOG.LOADING_ERROR WHERE PR_ID=@PROCESS_ID AND ERR_TYPE='DUPLICATION Failed STAGE';
SET @MSG=CAST(@CNT_1 as VARCHAR)+' duplicated STAGE records were found.  (check LOG.LOADING_ERROR)'

IF @CNT_1=0 EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='SUCCESS', @DETAIL='No duplication in STAGE.MOVIEDATA';
ELSE EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='WARNING', @DETAIL=@MSG;
 


/* STAGE - MD DUPLICATIONS - FAILED OLD data IN MD */
INSERT INTO LOG.LOADING_ERROR(ERR_ID, PR_ID, ERR_TYPE, ERR_MSG, TABLE_SRC, NATURE_KEY, NATURE_KEY_VALUE, FAILED_COLUMN, FAILED_COLUMN_VALUE, RUN_DTTM) 
SELECT
  control.f_generrorid(NEXT VALUE FOR LOG.SEQ_ERROR_ID) as ERR_ID, 
   @PROCESS_ID AS PR_ID,
   'DUPLICATION STAGE > MD' AS ERR_TYPE,
   'Duplicated entity, MD will be overwritten (based on IMDB_ID)' AS ERR_MSG,
   'STAGE.MOVIEDATA - MD' AS TABLE_SRC,
   'MOVIE_ID' AS NATURE_KEY,
   MOVIE_ID as NATURE_KEY_VALUE,
   'ROWTYPE' FAILED_COLUMNS,
   FAILED_COLUMN_VALUE,
   CURRENT_TIMESTAMP as RUN_DTTM
FROM 
(SELECT 
  MOVIE_ID,  
  CONCAT_WS('|', RNK, TYP, LOAD_TYPE, IMDB_ID, TITLE, TITLE_ALT, RELEASE_YEAR, GENRES, COUNTRY, ACTORS, DIRECTORS, WRITERS, IMDB_RATING, IMDB_VOTES, METASCORE, TOMATOMETER, RELEASE_DATE, KEYWORDS, RUNTIME, PLOT, AWARDS, POSTER, TOMATO_USER_METER, TOMATO_USER_REVIEWS) as FAILED_COLUMN_VALUE 
FROM MOVIEDATA.V_STAGE_MD_DUPLICATIONS
WHERE TYP='OLD' AND RNK > 1) INNER_1
/* INCORRECT ROWS WITH LESS DATA FROM STAGE*/

SELECT @CNT_1=COUNT(*) FROM LOG.LOADING_ERROR WHERE PR_ID=@PROCESS_ID AND ERR_TYPE='DUPLICATION STAGE > MD';
SET @MSG=CAST(@CNT_1 as VARCHAR)+' duplicated row(s) were found during loading in STAGE - MD and will be overwritten in MD (check LOG.LOADING_ERROR)'

IF @CNT_1=0 EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='SUCCESS', @DETAIL='No duplication in STAGE.MOVIEDATA - MD';
ELSE EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='WARNING', @DETAIL=@MSG;
 
/* DELETE OLD FILMS */
INSERT INTO MOVIEDATA.ARCHIVED_MOVIES 
SELECT @PROCESS_ID AS PR_ID, ARC.MOVIE_ID, ARC.IMDB_ID FROM (SELECT MOVIE_ID, IMDB_ID FROM MOVIEDATA.V_STAGE_MD_DUPLICATIONS WHERE TYP='OLD' AND RNK>1) ARC;

DELETE FROM MOVIEDATA.MOVIE WHERE MOVIE_ID IN (SELECT MOVIE_ID FROM MOVIEDATA.V_STAGE_MD_DUPLICATIONS WHERE TYP='OLD' AND RNK>1);
DELETE FROM MOVIEDATA.MOVIEFEATURE WHERE MOVIE_ID IN (SELECT MOVIE_ID FROM MOVIEDATA.V_STAGE_MD_DUPLICATIONS WHERE TYP='OLD' AND RNK>1);
DELETE FROM MOVIEDATA.KEYWORDFEATURE WHERE MOVIE_ID IN (SELECT MOVIE_ID FROM MOVIEDATA.V_STAGE_MD_DUPLICATIONS WHERE TYP='OLD' AND RNK>1);

DELETE FROM USERDATA.TMP_REC_CB WHERE MOVIE_ID IN (SELECT MOVIE_ID FROM MOVIEDATA.V_STAGE_MD_DUPLICATIONS WHERE TYP='OLD' AND RNK>1);
DELETE FROM USERDATA.RECOMMENDATION WHERE MOVIE_ID IN (SELECT MOVIE_ID FROM MOVIEDATA.V_STAGE_MD_DUPLICATIONS WHERE TYP='OLD' AND RNK>1);



/* Eo v1.7 */
/*---------------------------------------  START - 1. --------------------------------------------*/
DECLARE @SEP VARCHAR(10)='__';

exec control.f_mm_transpose @inputViewSchema = 'CONTROL', @SEPARATOR=@SEP, @inputViewName = 'V_MOVIEDATA_SCHEMA_COL_STRUCT', @outputViewSchema = 'CONTROL', @outputViewName = 'V_TR_MOVIEDATA_SCHEMA_COL_STRUCT', @idCol = 'COLUMN_NAME';


INSERT INTO LOG.LOADING_ERROR(ERR_ID, PR_ID, ERR_TYPE, ERR_MSG, TABLE_SRC, NATURE_KEY, NATURE_KEY_VALUE, FAILED_COLUMN, FAILED_COLUMN_VALUE, RUN_DTTM) 
SELECT    
     control.f_generrorid(NEXT VALUE FOR LOG.SEQ_ERROR_ID) as ERR_ID,
     @PROCESS_ID AS PR_ID,
     'FORMAT' AS ERR_TYPE,
    'Invalid format during loading from STAGE to MOVIEDATA schema' as ERR_MSG,
    'STAGE.MOVIEDATA' as TABLE_SRC,
    'IMDB_ID' as NATURE_KEY,    
    IMDB_ID as NATURE_KEY_VALUE,
    FAILED_COLUMNS,
    control.f_mm_replaceStringArray(FAILED_COLUMNS,
                                        ',',
                                        ALL_COLUMNS,
                                        '|',
                                        ' | ')   as FAILED_COLUMN_VALUE,
    CURRENT_TIMESTAMP as RUN_DTTM
      
 
FROM
(select  CONCAT_WS(', ', 
                    IIF(TITLE_NM_format=0, 'TITLE', NULL ),
                    IIF(TITLE_ALT_NM_format=0, 'TITLE_ALT', NULL ),
                    IIF(RELEASE_YEAR_format=0, 'RELEASE_YEAR', NULL ),
                    IIF(GENRE_NM_format=0, 'GENRES', NULL ),
                    IIF(COUNTRY_NM_format=0, 'COUNTRY', NULL ),
                    IIF(ACTOR_NM_format=0, 'ACTORS', NULL ),
                    IIF(DIRECTOR_NM_format=0, 'DIRECTORS', NULL ),
                    IIF(WRITER_NM_format=0, 'WRITERS', NULL ),
                    IIF(IMDB_RATING_format=0, 'IMDB_RATING', NULL ),
                    IIF(IMDB_VOTES_format=0, 'IMDB_VOTES', NULL ),
                    IIF(IMDB_ID_format=0, 'IMDB_ID', NULL ),
                    IIF(METASCORE_format=0, 'METASCORE', NULL ),
                    IIF(TOMATOMETER_format=0, 'TOMATOMETER', NULL ),
                    IIF(TOMATO_USER_METER_format=0, 'TOMATO_USER_METER', NULL ),
                    IIF(TOMATO_USER_REVIEWS_format=0, 'TOMATO_USER_REVIEWS', NULL ),
                    /* - So v1.2,1.3 - */
                    IIF(KEYWORDS_format=0, 'KEYWORDS', NULL ),
                    IIF(RUNTIME_format=0, 'RUNTIME', NULL ),
                    IIF(PLOT_format=0, 'PLOT', NULL ),
                    IIF(AWARDS_format=0, 'AWARDS', NULL ),
                    IIF(POSTER_format=0, 'POSTER', NULL ),
                    IIF(RELEASE_DATE_format=0, 'RELEASE_DATE', NULL )
                    /* - Eo v1.2,1.3 - */
                  ) as FAILED_COLUMNS,
                  CONCAT_WS('|', 'TITLE|'+TITLE,
                                 'TITLE_ALT|'+TITLE_ALT, 
                                 'RELEASE_YEAR|'+RELEASE_YEAR, 
                                 'GENRES|'+GENRES, 
                                 'COUNTRY|'+COUNTRY,
                                 'ACTORS|'+ACTORS, 
                                 'DIRECTORS|'+DIRECTORS,
                                 'WRITERS|'+WRITERS, 
                                 'IMDB_RATING|'+IMDB_RATING,
                                 'IMDB_VOTES|'+IMDB_VOTES,
                                 'IMDB_ID|'+IMDB_ID,
                                 'METASCORE|'+METASCORE, 
                                 'TOMATOMETER|'+TOMATOMETER, 
                                 'TOMATO_USER_METER|'+TOMATO_USER_METER,
                                 'TOMATO_USER_REVIEWS|'+TOMATO_USER_REVIEWS,
                                 /* - So v1.2,1.3 - */
                                 'KEYWORDS|'+KEYWORDS,
                                 'RUNTIME|'+RUNTIME,
                                 'PLOT|'+PLOT,
                                 'AWARDS|'+AWARDS,
                                 'POSTER|'+POSTER,
                                 'RELEASE_DATE|'+RELEASE_DATE
                                 /* - Eo v1.2,1.3 - */
                  )+'|' AS ALL_COLUMNS,
                  INNER_1.IMDB_ID 
          
                   from
(select 
  control.f_isformatvalid(stage_md.TITLE, 'N', TR_STRUCT.IS_NULLABLE__TITLE_NM, TR_STRUCT.DATA_TYPE__TITLE_NM, TR_STRUCT.CHARACTER_MAXIMUM_LENGTH__TITLE_NM, TR_STRUCT.NUMERIC_PRECISION__TITLE_NM, TR_STRUCT.NUMERIC_SCALE__TITLE_NM) as TITLE_NM_format,
  control.f_isformatvalid(stage_md.TITLE_ALT, 'N', TR_STRUCT.IS_NULLABLE__TITLE_ALT_NM, TR_STRUCT.DATA_TYPE__TITLE_ALT_NM, TR_STRUCT.CHARACTER_MAXIMUM_LENGTH__TITLE_ALT_NM, TR_STRUCT.NUMERIC_PRECISION__TITLE_ALT_NM, TR_STRUCT.NUMERIC_SCALE__TITLE_ALT_NM) as TITLE_ALT_NM_format,
  control.f_isformatvalid(stage_md.RELEASE_YEAR, 'N', TR_STRUCT.IS_NULLABLE__RELEASE_YEAR, TR_STRUCT.DATA_TYPE__RELEASE_YEAR, TR_STRUCT.CHARACTER_MAXIMUM_LENGTH__RELEASE_YEAR, TR_STRUCT.NUMERIC_PRECISION__RELEASE_YEAR, TR_STRUCT.NUMERIC_SCALE__RELEASE_YEAR) as RELEASE_YEAR_format,
  control.f_isformatvalid(stage_md.GENRES, 'Y', TR_STRUCT.IS_NULLABLE__GENRE_NM, TR_STRUCT.DATA_TYPE__GENRE_NM, TR_STRUCT.CHARACTER_MAXIMUM_LENGTH__GENRE_NM, TR_STRUCT.NUMERIC_PRECISION__GENRE_NM, TR_STRUCT.NUMERIC_SCALE__GENRE_NM) as GENRE_NM_format,
  control.f_isformatvalid(stage_md.COUNTRY, 'Y', TR_STRUCT.IS_NULLABLE__COUNTRY_NM, TR_STRUCT.DATA_TYPE__COUNTRY_NM, TR_STRUCT.CHARACTER_MAXIMUM_LENGTH__COUNTRY_NM, TR_STRUCT.NUMERIC_PRECISION__COUNTRY_NM, TR_STRUCT.NUMERIC_SCALE__COUNTRY_NM) as COUNTRY_NM_format,
  control.f_isformatvalid(stage_md.ACTORS, 'Y', TR_STRUCT.IS_NULLABLE__ACTOR_NM, TR_STRUCT.DATA_TYPE__ACTOR_NM, TR_STRUCT.CHARACTER_MAXIMUM_LENGTH__ACTOR_NM, TR_STRUCT.NUMERIC_PRECISION__ACTOR_NM, TR_STRUCT.NUMERIC_SCALE__ACTOR_NM) as ACTOR_NM_format,
  control.f_isformatvalid(stage_md.DIRECTORS, 'Y', TR_STRUCT.IS_NULLABLE__DIRECTOR_NM, TR_STRUCT.DATA_TYPE__DIRECTOR_NM, TR_STRUCT.CHARACTER_MAXIMUM_LENGTH__DIRECTOR_NM, TR_STRUCT.NUMERIC_PRECISION__DIRECTOR_NM, TR_STRUCT.NUMERIC_SCALE__DIRECTOR_NM) as DIRECTOR_NM_format,
  control.f_isformatvalid(stage_md.WRITERS, 'Y', TR_STRUCT.IS_NULLABLE__WRITER_NM, TR_STRUCT.DATA_TYPE__WRITER_NM, TR_STRUCT.CHARACTER_MAXIMUM_LENGTH__WRITER_NM, TR_STRUCT.NUMERIC_PRECISION__WRITER_NM, TR_STRUCT.NUMERIC_SCALE__WRITER_NM) as WRITER_NM_format,
  control.f_isformatvalid(stage_md.IMDB_RATING, 'N', TR_STRUCT.IS_NULLABLE__IMDB_RATING, TR_STRUCT.DATA_TYPE__IMDB_RATING, TR_STRUCT.CHARACTER_MAXIMUM_LENGTH__IMDB_RATING, TR_STRUCT.NUMERIC_PRECISION__IMDB_RATING, TR_STRUCT.NUMERIC_SCALE__IMDB_RATING) as IMDB_RATING_format,
  control.f_isformatvalid(stage_md.IMDB_VOTES, 'N', TR_STRUCT.IS_NULLABLE__IMDB_VOTES, TR_STRUCT.DATA_TYPE__IMDB_VOTES, TR_STRUCT.CHARACTER_MAXIMUM_LENGTH__IMDB_VOTES, TR_STRUCT.NUMERIC_PRECISION__IMDB_VOTES, TR_STRUCT.NUMERIC_SCALE__IMDB_VOTES) as IMDB_VOTES_format,
  control.f_isformatvalid(stage_md.IMDB_ID, 'N', TR_STRUCT.IS_NULLABLE__IMDB_ID, TR_STRUCT.DATA_TYPE__IMDB_ID, TR_STRUCT.CHARACTER_MAXIMUM_LENGTH__IMDB_ID, TR_STRUCT.NUMERIC_PRECISION__IMDB_ID, TR_STRUCT.NUMERIC_SCALE__IMDB_ID) as IMDB_ID_format,
  control.f_isformatvalid(stage_md.METASCORE, 'N', TR_STRUCT.IS_NULLABLE__METASCORE, TR_STRUCT.DATA_TYPE__METASCORE, TR_STRUCT.CHARACTER_MAXIMUM_LENGTH__METASCORE, TR_STRUCT.NUMERIC_PRECISION__METASCORE, TR_STRUCT.NUMERIC_SCALE__METASCORE) as METASCORE_format,
  control.f_isformatvalid(stage_md.TOMATOMETER, 'N', TR_STRUCT.IS_NULLABLE__TOMATOMETER, TR_STRUCT.DATA_TYPE__TOMATOMETER, TR_STRUCT.CHARACTER_MAXIMUM_LENGTH__TOMATOMETER, TR_STRUCT.NUMERIC_PRECISION__TOMATOMETER, TR_STRUCT.NUMERIC_SCALE__TOMATOMETER) as TOMATOMETER_format,
  control.f_isformatvalid(stage_md.TOMATO_USER_METER, 'N', TR_STRUCT.IS_NULLABLE__TOMATO_USER_METER, TR_STRUCT.DATA_TYPE__TOMATO_USER_METER, TR_STRUCT.CHARACTER_MAXIMUM_LENGTH__TOMATO_USER_METER, TR_STRUCT.NUMERIC_PRECISION__TOMATO_USER_METER, TR_STRUCT.NUMERIC_SCALE__TOMATO_USER_METER) as TOMATO_USER_METER_format,
  control.f_isformatvalid(stage_md.TOMATO_USER_REVIEWS, 'N',  TR_STRUCT.IS_NULLABLE__TOMATO_USER_REVIEWS, TR_STRUCT.DATA_TYPE__TOMATO_USER_REVIEWS, TR_STRUCT.CHARACTER_MAXIMUM_LENGTH__TOMATO_USER_REVIEWS, TR_STRUCT.NUMERIC_PRECISION__TOMATO_USER_REVIEWS, TR_STRUCT.NUMERIC_SCALE__TOMATO_USER_REVIEWS) as TOMATO_USER_REVIEWS_format,
/* - So v1.2, v1.5 - */
  control.f_isformatvalid(stage_md.KEYWORDS, 'Y',  TR_STRUCT.IS_NULLABLE__KEYWORD_NM, TR_STRUCT.DATA_TYPE__KEYWORD_NM, TR_STRUCT.CHARACTER_MAXIMUM_LENGTH__KEYWORD_NM, TR_STRUCT.NUMERIC_PRECISION__KEYWORD_NM, TR_STRUCT.NUMERIC_SCALE__KEYWORD_NM) as KEYWORDS_format,
  control.f_isformatvalid(stage_md.RUNTIME, 'N',  TR_STRUCT.IS_NULLABLE__RUNTIME, TR_STRUCT.DATA_TYPE__RUNTIME, TR_STRUCT.CHARACTER_MAXIMUM_LENGTH__RUNTIME, TR_STRUCT.NUMERIC_PRECISION__RUNTIME, TR_STRUCT.NUMERIC_SCALE__RUNTIME) as RUNTIME_format,
  control.f_isformatvalid(stage_md.PLOT, 'N',  TR_STRUCT.IS_NULLABLE__PLOT, TR_STRUCT.DATA_TYPE__PLOT, TR_STRUCT.CHARACTER_MAXIMUM_LENGTH__PLOT, TR_STRUCT.NUMERIC_PRECISION__PLOT, TR_STRUCT.NUMERIC_SCALE__PLOT) as PLOT_format,
  control.f_isformatvalid(stage_md.AWARDS, 'N',  TR_STRUCT.IS_NULLABLE__AWARDS, TR_STRUCT.DATA_TYPE__AWARDS, TR_STRUCT.CHARACTER_MAXIMUM_LENGTH__AWARDS, TR_STRUCT.NUMERIC_PRECISION__AWARDS, TR_STRUCT.NUMERIC_SCALE__AWARDS) as AWARDS_format,
  control.f_isformatvalid(stage_md.POSTER, 'N',  TR_STRUCT.IS_NULLABLE__POSTER, TR_STRUCT.DATA_TYPE__POSTER, TR_STRUCT.CHARACTER_MAXIMUM_LENGTH__POSTER, TR_STRUCT.NUMERIC_PRECISION__POSTER, TR_STRUCT.NUMERIC_SCALE__POSTER) as POSTER_format,
  control.f_isformatvalid(stage_md.RELEASE_DATE, 'N',  TR_STRUCT.IS_NULLABLE__RELEASE_DATE, TR_STRUCT.DATA_TYPE__RELEASE_DATE, TR_STRUCT.CHARACTER_MAXIMUM_LENGTH__RELEASE_DATE, TR_STRUCT.NUMERIC_PRECISION__RELEASE_DATE, TR_STRUCT.NUMERIC_SCALE__RELEASE_DATE) as RELEASE_DATE_format,
/* - Eo v1.2, v1.5 - */
 stage_md.*  from 
(select * from stage.TMP_NODUPL_MOVIEDATA) stage_md
left join (select * from control.V_TR_MOVIEDATA_SCHEMA_COL_STRUCT) TR_STRUCT on 1=1
) INNER_1 
where 
( 
  TITLE_NM_format = 0 OR
  TITLE_ALT_NM_format = 0 OR
  RELEASE_YEAR_format = 0 OR
  GENRE_NM_format = 0 OR
  COUNTRY_NM_format = 0 OR
  ACTOR_NM_format = 0 OR
  DIRECTOR_NM_format = 0 OR
  WRITER_NM_format = 0 OR
  IMDB_RATING_format = 0 OR
  IMDB_VOTES_format = 0 OR
  IMDB_ID_format = 0 OR
  METASCORE_format = 0 OR
  TOMATOMETER_format = 0 OR
  TOMATO_USER_METER_format = 0 OR
  TOMATO_USER_REVIEWS_format = 0 OR
  /* - So v1.2, v1.5 - */
  KEYWORDS_format = 0 OR
  RUNTIME_format = 0 OR
  PLOT_format = 0 OR
  AWARDS_format = 0 OR
  POSTER_format = 0 OR
  RELEASE_DATE_format = 0
  /* - Eo v1.2, v1.5  - */
)) INNER_2 


DROP TABLE STAGE.TMP_MOVIEDATA

SELECT 
              IMDB_ID,
              replace(TITLE, '\"', '"') AS TITLE,
              replace(TITLE_ALT, '\"', '"') AS TITLE_ALT,
              RELEASE_YEAR,
              GENRES,
              COUNTRY,
              ACTORS,
              DIRECTORS,
              WRITERS,
              IMDB_RATING,
              IMDB_VOTES,
              METASCORE,
              TOMATOMETER,
              TOMATO_USER_METER,
              TOMATO_USER_REVIEWS,
              /* So v1.2, 1.3 */ 
              RELEASE_DATE,
              replace(KEYWORDS, '\"', '"') as KEYWORDS,
              RUNTIME,
              replace(PLOT, '\"', '"') as PLOT,
              AWARDS,
              POSTER
              /* Eo v1.2, 1.3 */  
 INTO STAGE.TMP_MOVIEDATA FROM STAGE.TMP_NODUPL_MOVIEDATA 
WHERE
IMDB_ID NOT IN 
(  
  SELECT NATURE_KEY_VALUE FROM LOG.LOADING_ERROR WHERE NATURE_KEY='IMDB_ID' AND PR_ID=@PROCESS_ID AND ERR_TYPE='FORMAT'
)

/*------------------------------------------------- 1.1 -------------------------------------------------------*/
UPDATE STAGE.TMP_MOVIEDATA
SET TITLE_ALT = ''
WHERE TITLE = TITLE_ALT;


SELECT @CNT_1=COUNT(*) FROM LOG.LOADING_ERROR WHERE PR_ID=@PROCESS_ID AND ERR_TYPE='FORMAT';
SET @MSG=CAST(@CNT_1 as VARCHAR)+' invalid format during loading from STAGE.MOVIEDATA to STAGE.TMP_MOVIEDATA (check LOG.LOADING_ERROR)'

IF @CNT_1=0 EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='SUCCESS', @DETAIL='No invalid format in STAGE.TMP_MOVIEDATA';
ELSE EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='WARNING', @DETAIL=@MSG;

/*----------------------------------------------  END - 1.  ---------------------------------------------------*/
/*------------------------------------------------- 1.2 ------------------------------------------------------*/
/* So v1.9 */

INSERT INTO STAGE.HUN_NAMES_FIX (PR_ID, IMDB_ID, TYPE, FIXED_NAMES) 
SELECT @PROCESS_ID AS PR_ID, IMDB_ID, TYPE, FULL_FIXED_NAME FROM CONTROL.V_FIXED_STAGE_HUN_NAMES;

UPDATE
    STAGE.TMP_MOVIEDATA 
SET
    STAGE.TMP_MOVIEDATA.ACTORS = HUNNAMES.FIXED_NAMES
FROM
    STAGE.TMP_MOVIEDATA STG
INNER JOIN
    STAGE.HUN_NAMES_FIX HUNNAMES
ON 
    STG.IMDB_ID = HUNNAMES.IMDB_ID
    AND HUNNAMES.TYPE='A';


UPDATE
    STAGE.TMP_MOVIEDATA 
SET
    STAGE.TMP_MOVIEDATA.DIRECTORS = HUNNAMES.FIXED_NAMES
FROM
    STAGE.TMP_MOVIEDATA STG
INNER JOIN
    STAGE.HUN_NAMES_FIX HUNNAMES
ON 
    STG.IMDB_ID = HUNNAMES.IMDB_ID
    AND HUNNAMES.TYPE='D';
    
UPDATE
    STAGE.TMP_MOVIEDATA 
SET
    STAGE.TMP_MOVIEDATA.WRITERS = HUNNAMES.FIXED_NAMES
FROM
    STAGE.TMP_MOVIEDATA STG
INNER JOIN
    STAGE.HUN_NAMES_FIX HUNNAMES
ON 
    STG.IMDB_ID = HUNNAMES.IMDB_ID
    AND HUNNAMES.TYPE='W';

SELECT @CNT_1=COUNT(*) FROM STAGE.HUN_NAMES_FIX WHERE PR_ID=@PROCESS_ID;
SET @MSG=CAST(@CNT_1 as VARCHAR)+' hungarian names were fixed.';
EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='INF', @DETAIL=@MSG;

/* Eo v1.9 */
/*---------------------------------------------- END 1.2 -----------------------------------------------*/
/*------------------------------------------  START - 2. -----------------------------------------------*/

--select * from STAGE.TMP_MOVIEDATA

SELECT @CNT_1=COUNT(*) FROM STAGE.TMP_MOVIEDATA WHERE IMDB_ID NOT IN (SELECT IMDB_ID FROM MOVIEDATA.MOVIE);
SELECT @CNT_2=COUNT(*) FROM STAGE.TMP_MOVIEDATA;

/* INSERTING INTO MOVIEDATA.MOVIE */
INSERT INTO MOVIEDATA.MOVIE 
SELECT 
  control.f_genmovieid(NEXT VALUE FOR MOVIEDATA.SEQ_MOVIE_ID) as MOVIE_ID, 
  IMDB_ID,
  TITLE AS TITLE_NM,
  TITLE_ALT AS TITLE_ALT_NM,
  RELEASE_YEAR,
  IMDB_RATING,
  IMDB_VOTES,
  METASCORE,
  TOMATOMETER,
  TOMATO_USER_METER,
  TOMATO_USER_REVIEWS,
  /* So v1.5 */
  convert(DATE, RELEASE_DATE),
  /* Eo v1.5 */
  /* So v1.2 */
  RUNTIME,
  PLOT,
  AWARDS,
  POSTER,
  /* Eo v1.2 */
  /* So v1.6 */
  @PROCESS_TIMESTAMP as RUN_DTTM
  /* Eo v1.6 */
 FROM STAGE.TMP_MOVIEDATA STAGE_MD-- WHERE STAGE_MD.IMDB_ID NOT IN (SELECT IMDB_ID FROM MOVIEDATA.MOVIE);

SET @MSG=CAST(@CNT_1 as VARCHAR)+' movies were inserted into MOVIEDATA.MOVIE ('+CAST((@CNT_2-@CNT_1) as VARCHAR)+' films were already in the table)';
EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='SUCCESS', @DETAIL=@MSG;

/* INSERTING INTO MOVIEDATA.ACTOR */

SELECT @CNT_1=COUNT(*) FROM MOVIEDATA.ACTOR;

INSERT INTO MOVIEDATA.ACTOR
SELECT 
  control.f_genactorid(NEXT VALUE FOR MOVIEDATA.SEQ_ACTOR_ID) as ACTOR_ID, 
  TRIM(ACTOR_NM)
FROM 
(SELECT       
      TRIM(ACTOR.VALUE) AS ACTOR_NM
FROM  (SELECT ACTORS FROM STAGE.TMP_MOVIEDATA) STAGE_MD  
CROSS APPLY STRING_SPLIT(STAGE_MD.ACTORS, ',') AS ACTOR) NEW_ACTORS
WHERE UPPER(NEW_ACTORS.ACTOR_NM) NOT IN (SELECT UPPER(ACTOR_NM) FROM MOVIEDATA.ACTOR)
GROUP BY ACTOR_NM

SELECT @CNT_2=COUNT(*) FROM MOVIEDATA.ACTOR;

SET @MSG=CAST((@CNT_2-@CNT_1) as VARCHAR)+' actors were inserted into MOVIEDATA.ACTOR';
EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='SUCCESS', @DETAIL=@MSG;


/* INSERTING INTO MOVIEDATA.GENRE */

SELECT @CNT_1=COUNT(*) FROM MOVIEDATA.GENRE;

INSERT INTO MOVIEDATA.GENRE
SELECT 
  control.f_gengenreid(NEXT VALUE FOR MOVIEDATA.SEQ_GENRE_ID) as GENRE_ID, 
  TRIM(GENRE_NM)
FROM 
(SELECT       
      TRIM(GENRE.VALUE) AS GENRE_NM
FROM  (SELECT GENRES FROM STAGE.TMP_MOVIEDATA) STAGE_MD  
CROSS APPLY STRING_SPLIT(STAGE_MD.GENRES, ',') AS GENRE) NEW_GENRES
WHERE UPPER(NEW_GENRES.GENRE_NM) NOT IN (SELECT UPPER(GENRE_NM) FROM MOVIEDATA.GENRE)
GROUP BY GENRE_NM

SELECT @CNT_2=COUNT(*) FROM MOVIEDATA.GENRE;

SET @MSG=CAST((@CNT_2-@CNT_1) as VARCHAR)+' genres were inserted into MOVIEDATA.GENRE';
EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='SUCCESS', @DETAIL=@MSG;


/* INSERTING INTO MOVIEDATA.WRITER */

SELECT @CNT_1=COUNT(*) FROM MOVIEDATA.WRITER;

INSERT INTO MOVIEDATA.WRITER
SELECT 
  control.f_genwriterid(NEXT VALUE FOR MOVIEDATA.SEQ_WRITER_ID) as WRITER_ID, 
  TRIM(WRITER_NM)
FROM 
(SELECT       
      TRIM(WRITER.VALUE) AS WRITER_NM
FROM  (SELECT WRITERS FROM STAGE.TMP_MOVIEDATA) STAGE_MD  
CROSS APPLY STRING_SPLIT(STAGE_MD.WRITERS, ',') AS WRITER) NEW_WRITERS
WHERE UPPER(NEW_WRITERS.WRITER_NM) NOT IN (SELECT UPPER(WRITER_NM) FROM MOVIEDATA.WRITER)
GROUP BY WRITER_NM

SELECT @CNT_2=COUNT(*) FROM MOVIEDATA.WRITER;

SET @MSG=CAST((@CNT_2-@CNT_1) as VARCHAR)+' writers were inserted into MOVIEDATA.WRITER';
EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='SUCCESS', @DETAIL=@MSG;


/* INSERTING INTO MOVIEDATA.COUNTRY */

SELECT @CNT_1=COUNT(*) FROM MOVIEDATA.COUNTRY;

INSERT INTO MOVIEDATA.COUNTRY
SELECT 
  control.f_gencountryid(NEXT VALUE FOR MOVIEDATA.SEQ_COUNTRY_ID) as COUNTRY_ID, 
  TRIM(COUNTRY_NM)
FROM 
(SELECT       
      TRIM(COUNTRY.VALUE) AS COUNTRY_NM
FROM  (SELECT COUNTRY FROM STAGE.TMP_MOVIEDATA) STAGE_MD  
CROSS APPLY STRING_SPLIT(STAGE_MD.COUNTRY, ',') AS COUNTRY) NEW_COUNTRY
WHERE UPPER(NEW_COUNTRY.COUNTRY_NM) NOT IN (SELECT UPPER(COUNTRY_NM) FROM MOVIEDATA.COUNTRY)
GROUP BY COUNTRY_NM

SELECT @CNT_2=COUNT(*) FROM MOVIEDATA.COUNTRY;

SET @MSG=CAST((@CNT_2-@CNT_1) as VARCHAR)+' countries were inserted into MOVIEDATA.COUNTRY';
EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='SUCCESS', @DETAIL=@MSG;


/* INSERTING INTO MOVIEDATA.DIRECTOR */

SELECT @CNT_1=COUNT(*) FROM MOVIEDATA.DIRECTOR;

INSERT INTO MOVIEDATA.DIRECTOR
SELECT 
  control.f_gendirectorid(NEXT VALUE FOR MOVIEDATA.SEQ_DIRECTOR_ID) as DIRECTOR_ID, 
  TRIM(DIRECTOR_NM)
FROM 
(SELECT       
      TRIM(DIRECTOR.VALUE) AS DIRECTOR_NM
FROM  (SELECT DIRECTORS FROM STAGE.TMP_MOVIEDATA) STAGE_MD  
CROSS APPLY STRING_SPLIT(STAGE_MD.DIRECTORS, ',') AS DIRECTOR) NEW_DIRECTORS
WHERE UPPER(NEW_DIRECTORS.DIRECTOR_NM) NOT IN (SELECT UPPER(DIRECTOR_NM) FROM MOVIEDATA.DIRECTOR)
GROUP BY DIRECTOR_NM

SELECT @CNT_2=COUNT(*) FROM MOVIEDATA.DIRECTOR;

SET @MSG=CAST((@CNT_2-@CNT_1) as VARCHAR)+' directors were inserted into MOVIEDATA.DIRECTOR';
EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='SUCCESS', @DETAIL=@MSG;

/* So v1.2 */
/* INSERTING INTO MOVIEDATA.KEYWORD */

SELECT @CNT_1=COUNT(*) FROM MOVIEDATA.KEYWORD;

INSERT INTO MOVIEDATA.KEYWORD
SELECT 
  control.f_genkeywordid(NEXT VALUE FOR MOVIEDATA.SEQ_KEYWORD_ID) as KEYWORD_ID, 
  TRIM(KEYWORD_NM)
FROM 
(SELECT       
      TRIM(KEYWORD.VALUE) AS KEYWORD_NM
FROM  (SELECT KEYWORDS FROM STAGE.TMP_MOVIEDATA) STAGE_MD  
CROSS APPLY STRING_SPLIT(STAGE_MD.KEYWORDS, ',') AS KEYWORD) NEW_KEYWORDS
WHERE UPPER(NEW_KEYWORDS.KEYWORD_NM) NOT IN (SELECT UPPER(KEYWORD_NM) FROM MOVIEDATA.KEYWORD)
GROUP BY KEYWORD_NM

SELECT @CNT_2=COUNT(*) FROM MOVIEDATA.KEYWORD;

SET @MSG=CAST((@CNT_2-@CNT_1) as VARCHAR)+' keywords were inserted into MOVIEDATA.KEYWORD';
EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='SUCCESS', @DETAIL=@MSG;

/* Eo v1.2 */

/*------------------------------ INSERTING MOVIEDATA.MOVIEFEATURE -----------------------------*/

/* INSERTING ACTORS INTO MOVIEDATA.MOVIEFEATURE */

SELECT @CNT_1=COUNT(*) FROM MOVIEDATA.MOVIEFEATURE WHERE FEATURE_CD='A';

INSERT INTO MOVIEDATA.MOVIEFEATURE
SELECT    
   control.f_genmoviefeatureid(NEXT VALUE FOR MOVIEDATA.SEQ_MOVIEFEATURE_ID) as MOVIE_FEATURE_ID,
   MD_MOVIE.MOVIE_ID, 
   'A' AS FEATURE_CD,
   MD_ACTOR.ACTOR_ID AS FEATURE_ID
FROM 
/*(SELECT   
      STAGE_MD.IMDB_ID,    
      ACTOR.VALUE AS ACTOR_NM
FROM  (SELECT IMDB_ID, ACTORS FROM STAGE.TMP_MOVIEDATA) STAGE_MD  
CROSS APPLY STRING_SPLIT(STAGE_MD.ACTORS, ',') AS ACTOR) ACTORS_FROM_STAGE*/ /* before v1.1 */

(SELECT IMDB_ID, TRIM(ACTOR_NM) AS ACTOR_NM FROM 
(SELECT MAIN.* FROM
      (SELECT STAGE_MD.IMDB_ID,    
      TRIM(ACTOR.VALUE) AS ACTOR_NM,
      (case when (row_number() over (partition by IMDB_ID order by imdb_id)) =1 then 3 
            when (row_number() over (partition by IMDB_ID order by imdb_id)) =2 then 2
            else 1
      end) as WEIGHT
FROM  (SELECT IMDB_ID, ACTORS FROM STAGE.TMP_MOVIEDATA) STAGE_MD  
CROSS APPLY STRING_SPLIT(STAGE_MD.ACTORS, ',') AS ACTOR) MAIN

UNION ALL

SELECT WEIGHT_2.* FROM (SELECT STAGE_MD.IMDB_ID,    
      TRIM(ACTOR.VALUE) AS ACTOR_NM,
      (case when (row_number() over (partition by IMDB_ID order by imdb_id)) =1 then 3 
            when (row_number() over (partition by IMDB_ID order by imdb_id)) =2 then 2
            else 1
      end) as WEIGHT
FROM  (SELECT IMDB_ID, ACTORS FROM STAGE.TMP_MOVIEDATA) STAGE_MD  
CROSS APPLY STRING_SPLIT(STAGE_MD.ACTORS, ',') AS ACTOR) WEIGHT_2 WHERE WEIGHT>1

UNION ALL

SELECT WEIGHT_2.* FROM (SELECT STAGE_MD.IMDB_ID,    
      TRIM(ACTOR.VALUE) AS ACTOR_NM,
      (case when (row_number() over (partition by IMDB_ID order by imdb_id)) =1 then 3 
            when (row_number() over (partition by IMDB_ID order by imdb_id)) =2 then 2
            else 1
      end) as WEIGHT
FROM  (SELECT IMDB_ID, ACTORS FROM STAGE.TMP_MOVIEDATA) STAGE_MD  
CROSS APPLY STRING_SPLIT(STAGE_MD.ACTORS, ',') AS ACTOR) WEIGHT_2 WHERE WEIGHT>2) INNER_1) ACTORS_FROM_STAGE  /* v1.1 */


LEFT JOIN
(SELECT MOVIE_ID, IMDB_ID FROM MOVIEDATA.MOVIE) MD_MOVIE
ON MD_MOVIE.IMDB_ID=ACTORS_FROM_STAGE.IMDB_ID

LEFT JOIN
(SELECT ACTOR_ID, ACTOR_NM FROM MOVIEDATA.ACTOR) MD_ACTOR
ON UPPER(MD_ACTOR.ACTOR_NM)=UPPER(ACTORS_FROM_STAGE.ACTOR_NM)

LEFT JOIN (SELECT CONCAT(MOVIE_ID, FEATURE_CD, FEATURE_ID) ORIG_CONC FROM MOVIEDATA.MOVIEFEATURE WHERE FEATURE_CD = 'A') ORIG_MF
ON CONCAT(MD_MOVIE.MOVIE_ID, 'A', MD_ACTOR.ACTOR_ID) = ORIG_MF.ORIG_CONC 

WHERE ORIG_MF.ORIG_CONC IS NULL;

SELECT @CNT_2=COUNT(*) FROM MOVIEDATA.MOVIEFEATURE WHERE FEATURE_CD='A';

SET @MSG=CAST((@CNT_2-@CNT_1) as VARCHAR)+' actors were inserted into MOVIEDATA.MOVIEFEATURE';
EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='SUCCESS', @DETAIL=@MSG;



/* INSERTING DIRECTORS INTO MOVIEDATA.MOVIEFEATURE */

SELECT @CNT_1=COUNT(*) FROM MOVIEDATA.MOVIEFEATURE WHERE FEATURE_CD='D';

INSERT INTO MOVIEDATA.MOVIEFEATURE
SELECT    
   control.f_genmoviefeatureid(NEXT VALUE FOR MOVIEDATA.SEQ_MOVIEFEATURE_ID) as MOVIE_FEATURE_ID,
   MD_MOVIE.MOVIE_ID, 
   'D' AS FEATURE_CD,
   MD_DIRECTOR.DIRECTOR_ID AS FEATURE_ID
FROM 
(SELECT   
      STAGE_MD.IMDB_ID,    
      TRIM(DIRECTOR.VALUE) AS DIRECTOR_NM
FROM  (SELECT IMDB_ID, DIRECTORS FROM STAGE.TMP_MOVIEDATA) STAGE_MD  
CROSS APPLY STRING_SPLIT(STAGE_MD.DIRECTORS, ',') AS DIRECTOR) DIRECTORS_FROM_STAGE

LEFT JOIN
(SELECT MOVIE_ID, IMDB_ID FROM MOVIEDATA.MOVIE) MD_MOVIE
ON MD_MOVIE.IMDB_ID=DIRECTORS_FROM_STAGE.IMDB_ID

LEFT JOIN
(SELECT DIRECTOR_ID, DIRECTOR_NM FROM MOVIEDATA.DIRECTOR) MD_DIRECTOR
ON UPPER(MD_DIRECTOR.DIRECTOR_NM)=UPPER(DIRECTORS_FROM_STAGE.DIRECTOR_NM)

LEFT JOIN (SELECT CONCAT(MOVIE_ID, FEATURE_CD, FEATURE_ID) ORIG_CONC FROM MOVIEDATA.MOVIEFEATURE WHERE FEATURE_CD = 'D') ORIG_MF
ON CONCAT(MD_MOVIE.MOVIE_ID, 'D', MD_DIRECTOR.DIRECTOR_ID) = ORIG_MF.ORIG_CONC 

WHERE ORIG_MF.ORIG_CONC IS NULL;
  
SELECT @CNT_2=COUNT(*) FROM MOVIEDATA.MOVIEFEATURE WHERE FEATURE_CD='D';

SET @MSG=CAST((@CNT_2-@CNT_1) as VARCHAR)+' directors were inserted into MOVIEDATA.MOVIEFEATURE';
EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='SUCCESS', @DETAIL=@MSG;



/* INSERTING WRITERS INTO MOVIEDATA.MOVIEFEATURE */

SELECT @CNT_1=COUNT(*) FROM MOVIEDATA.MOVIEFEATURE WHERE FEATURE_CD='W';

INSERT INTO MOVIEDATA.MOVIEFEATURE
SELECT   
   control.f_genmoviefeatureid(NEXT VALUE FOR MOVIEDATA.SEQ_MOVIEFEATURE_ID) as MOVIE_FEATURE_ID,
   MD_MOVIE.MOVIE_ID, 
   'W' AS FEATURE_CD,
   MD_WRITER.WRITER_ID AS FEATURE_ID
FROM
(SELECT   
      STAGE_MD.IMDB_ID,    
      TRIM(WRITER.VALUE) AS WRITER_NM
FROM  (SELECT IMDB_ID, WRITERS FROM STAGE.TMP_MOVIEDATA) STAGE_MD  
CROSS APPLY STRING_SPLIT(STAGE_MD.WRITERS, ',') AS WRITER) WRITERS_FROM_STAGE

LEFT JOIN
(SELECT MOVIE_ID, IMDB_ID FROM MOVIEDATA.MOVIE) MD_MOVIE
ON MD_MOVIE.IMDB_ID=WRITERS_FROM_STAGE.IMDB_ID

LEFT JOIN
(SELECT WRITER_ID, WRITER_NM FROM MOVIEDATA.WRITER) MD_WRITER
ON UPPER(MD_WRITER.WRITER_NM)=UPPER(WRITERS_FROM_STAGE.WRITER_NM)

LEFT JOIN (SELECT CONCAT(MOVIE_ID, FEATURE_CD, FEATURE_ID) ORIG_CONC FROM MOVIEDATA.MOVIEFEATURE WHERE FEATURE_CD = 'W') ORIG_MF
ON CONCAT(MD_MOVIE.MOVIE_ID, 'W', MD_WRITER.WRITER_ID) = ORIG_MF.ORIG_CONC 

WHERE ORIG_MF.ORIG_CONC IS NULL;
 

SELECT @CNT_2=COUNT(*) FROM MOVIEDATA.MOVIEFEATURE WHERE FEATURE_CD='W';

SET @MSG=CAST((@CNT_2-@CNT_1) as VARCHAR)+' writers were inserted into MOVIEDATA.MOVIEFEATURE';
EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='SUCCESS', @DETAIL=@MSG;


/* INSERTING GENRES INTO MOVIEDATA.MOVIEFEATURE */

SELECT @CNT_1=COUNT(*) FROM MOVIEDATA.MOVIEFEATURE WHERE FEATURE_CD='G';

INSERT INTO MOVIEDATA.MOVIEFEATURE
SELECT    
  control.f_genmoviefeatureid(NEXT VALUE FOR MOVIEDATA.SEQ_MOVIEFEATURE_ID) as MOVIE_FEATURE_ID,
   MD_MOVIE.MOVIE_ID, 
   'G' AS FEATURE_CD,
   MD_GENRE.GENRE_ID AS FEATURE_ID
FROM 
(SELECT   
      STAGE_MD.IMDB_ID,    
      TRIM(GENRE.VALUE) AS GENRE_NM
FROM  (SELECT IMDB_ID, GENRES FROM STAGE.TMP_MOVIEDATA) STAGE_MD  
CROSS APPLY STRING_SPLIT(STAGE_MD.GENRES, ',') AS GENRE) GENRES_FROM_STAGE

LEFT JOIN
(SELECT MOVIE_ID, IMDB_ID FROM MOVIEDATA.MOVIE) MD_MOVIE
ON MD_MOVIE.IMDB_ID=GENRES_FROM_STAGE.IMDB_ID

LEFT JOIN
(SELECT GENRE_ID, GENRE_NM FROM MOVIEDATA.GENRE) MD_GENRE
ON UPPER(MD_GENRE.GENRE_NM)=UPPER(GENRES_FROM_STAGE.GENRE_NM)

LEFT JOIN (SELECT CONCAT(MOVIE_ID, FEATURE_CD, FEATURE_ID) ORIG_CONC FROM MOVIEDATA.MOVIEFEATURE WHERE FEATURE_CD = 'G') ORIG_MF
ON CONCAT(MD_MOVIE.MOVIE_ID, 'G', MD_GENRE.GENRE_ID) = ORIG_MF.ORIG_CONC 

WHERE ORIG_MF.ORIG_CONC IS NULL;

SELECT @CNT_2=COUNT(*) FROM MOVIEDATA.MOVIEFEATURE WHERE FEATURE_CD='G';

SET @MSG=CAST((@CNT_2-@CNT_1) as VARCHAR)+' genres were inserted into MOVIEDATA.MOVIEFEATURE';
EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='SUCCESS', @DETAIL=@MSG;



/* INSERTING COUNTRIES INTO MOVIEDATA.MOVIEFEATURE */

SELECT @CNT_1=COUNT(*) FROM MOVIEDATA.MOVIEFEATURE WHERE FEATURE_CD='C';

INSERT INTO MOVIEDATA.MOVIEFEATURE
SELECT    
   control.f_genmoviefeatureid(NEXT VALUE FOR MOVIEDATA.SEQ_MOVIEFEATURE_ID) as MOVIE_FEATURE_ID, 
   MD_MOVIE.MOVIE_ID, 
   'C' AS FEATURE_CD,
   MD_COUNTRY.COUNTRY_ID AS FEATURE_ID
FROM 
(SELECT   
      STAGE_MD.IMDB_ID,    
      TRIM(COUNTRY.VALUE) AS COUNTRY_NM
FROM  (SELECT IMDB_ID, COUNTRY FROM STAGE.TMP_MOVIEDATA) STAGE_MD  
CROSS APPLY STRING_SPLIT(STAGE_MD.COUNTRY, ',') AS COUNTRY) COUNTRY_FROM_STAGE

LEFT JOIN
(SELECT MOVIE_ID, IMDB_ID FROM MOVIEDATA.MOVIE) MD_MOVIE
ON MD_MOVIE.IMDB_ID=COUNTRY_FROM_STAGE.IMDB_ID

LEFT JOIN
(SELECT COUNTRY_ID, COUNTRY_NM FROM MOVIEDATA.COUNTRY) MD_COUNTRY
ON UPPER(MD_COUNTRY.COUNTRY_NM)=UPPER(COUNTRY_FROM_STAGE.COUNTRY_NM)

LEFT JOIN (SELECT CONCAT(MOVIE_ID, FEATURE_CD, FEATURE_ID) ORIG_CONC FROM MOVIEDATA.MOVIEFEATURE WHERE FEATURE_CD = 'C') ORIG_MF
ON CONCAT(MD_MOVIE.MOVIE_ID, 'C', MD_COUNTRY.COUNTRY_ID) = ORIG_MF.ORIG_CONC 

WHERE ORIG_MF.ORIG_CONC IS NULL;

SELECT @CNT_2=COUNT(*) FROM MOVIEDATA.MOVIEFEATURE WHERE FEATURE_CD='C';

SET @MSG=CAST((@CNT_2-@CNT_1) as VARCHAR)+' countries were inserted into MOVIEDATA.MOVIEFEATURE';
EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='SUCCESS', @DETAIL=@MSG;

/* So v1.2 */
/* INSERTING GENRES INTO MOVIEDATA.MOVIEFEATURE */

SELECT @CNT_1=COUNT(*) FROM MOVIEDATA.KEYWORDFEATURE;

INSERT INTO MOVIEDATA.KEYWORDFEATURE
SELECT    
  control.f_genkeywordfeatureid(NEXT VALUE FOR MOVIEDATA.SEQ_KEYWORDFEATURE_ID) as KEYWORD_FEATURE_ID,
  MD_MOVIE.MOVIE_ID, 
  MD_KEYWORD.KEYWORD_ID
FROM 
(SELECT   
      STAGE_MD.IMDB_ID,    
      TRIM(KEYWORD.VALUE) AS KEYWORD_NM
FROM  (SELECT IMDB_ID, KEYWORDS FROM STAGE.TMP_MOVIEDATA) STAGE_MD  
CROSS APPLY STRING_SPLIT(STAGE_MD.KEYWORDS, ',') AS KEYWORD) KEYWORDS_FROM_STAGE

LEFT JOIN
(SELECT MOVIE_ID, IMDB_ID FROM MOVIEDATA.MOVIE) MD_MOVIE
ON MD_MOVIE.IMDB_ID=KEYWORDS_FROM_STAGE.IMDB_ID

LEFT JOIN
(SELECT KEYWORD_ID, KEYWORD_NM FROM MOVIEDATA.KEYWORD) MD_KEYWORD
ON UPPER(MD_KEYWORD.KEYWORD_NM)=UPPER(KEYWORDS_FROM_STAGE.KEYWORD_NM)

LEFT JOIN (SELECT CONCAT(MOVIE_ID, KEYWORD_ID) ORIG_CONC FROM MOVIEDATA.KEYWORDFEATURE) ORIG_KF
ON CONCAT(MD_MOVIE.MOVIE_ID, MD_KEYWORD.KEYWORD_ID) = ORIG_KF.ORIG_CONC 

WHERE ORIG_KF.ORIG_CONC IS NULL;

SELECT @CNT_2=COUNT(*) FROM MOVIEDATA.KEYWORDFEATURE;

SET @MSG=CAST((@CNT_2-@CNT_1) as VARCHAR)+' keywords were inserted into MOVIEDATA.KEYWORDFEATURE';
EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='SUCCESS', @DETAIL=@MSG;
/* Eo v1.2 */

/*----------------------------------------------  END - 2.  ---------------------------------------------------*/

/*---------------------------------------  START - 3.  -------------------------------------------*/
/* So v1.7 */
/* update userdata.rating deleted movie_id with the updated movie's movie_id */

INSERT INTO LOG.LOADING_ERROR(ERR_ID, PR_ID, ERR_TYPE, ERR_MSG, TABLE_SRC, NATURE_KEY, NATURE_KEY_VALUE, FAILED_COLUMN, FAILED_COLUMN_VALUE, RUN_DTTM) 
SELECT
  control.f_generrorid(NEXT VALUE FOR LOG.SEQ_ERROR_ID) as ERR_ID, 
   @PROCESS_ID AS PR_ID,
   'RENAMING IN RATING' AS ERR_TYPE,
   'Movie ID updating was done in USERDATA.RATING' AS ERR_MSG,
   'USERDATA.RATING' AS TABLE_SRC,
   'IMDB_ID' AS NATURE_KEY,
   IMDB_ID as NATURE_KEY_VALUE,
   'FROM-TO' FAILED_COLUMNS,
   FAILED_COLUMN_VALUE,
   CURRENT_TIMESTAMP as RUN_DTTM
FROM 
(SELECT 
  IMDB_ID,  
  OLD_MOVIE_ID+'-'+NEW_MOVIE_ID as FAILED_COLUMN_VALUE 
FROM (SELECT NEW.MOVIE_ID as NEW_MOVIE_ID, ARC.MOVIE_ID as OLD_MOVIE_ID, ARC.IMDB_ID FROM MOVIEDATA.MOVIE NEW 
                  INNER JOIN MOVIEDATA.ARCHIVED_MOVIES ARC ON ARC.IMDB_ID=NEW.IMDB_ID
                  WHERE PR_ID = @PROCESS_ID)INNER_1) INNER_2


UPDATE USERDATA.RATING
SET MOVIE_ID=IDS.NEW_MOVIE_ID
FROM USERDATA.RATING OLD_RATING
INNER JOIN (
                  SELECT NEW.MOVIE_ID as NEW_MOVIE_ID, ARC.MOVIE_ID as OLD_MOVIE_ID FROM MOVIEDATA.MOVIE NEW 
                  INNER JOIN MOVIEDATA.ARCHIVED_MOVIES ARC ON ARC.IMDB_ID=NEW.IMDB_ID
                  WHERE PR_ID = @PROCESS_ID) IDS
ON OLD_RATING.MOVIE_ID=IDS.OLD_MOVIE_ID


SELECT @CNT_1=COUNT(*) FROM LOG.LOADING_ERROR WHERE PR_ID=@PROCESS_ID AND ERR_TYPE='RENAMING IN RATING';
SET @MSG=CAST(@CNT_1 as VARCHAR)+' movie_id renaming was done in USERDATA.RATING (check LOG.LOADING_ERROR)'

IF @CNT_1=0 EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='SUCCESS', @DETAIL='No renaming in USERDATA.RATING';
ELSE EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='WARNING', @DETAIL=@MSG;
 

/* Eo v1.7 */

/* So v1.4 */
exec control.backup_stage @tp='C';
TRUNCATE table STAGE.MOVIEDATA; 

SET @MSG='STAGE.MOVIEDATA truncated.';
EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='SUCCESS', @DETAIL=@MSG;
/* Eo v1.4 */
/*----------------------------------------------  END - 3.  ---------------------------------------------------*/

EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='END', @DETAIL='End of LoadMoviedata procedure';

COMMIT;

END

/*
 ------------------------------------------------------------------------------------------------------------
|                                             End of Code                                                    |
 ------------------------------------------------------------------------------------------------------------
*/ 


/*
testing

EXEC CONTROL.LOADMOVIEDATA;


SELECT
    INNER_1.*,
    CAST((SUM(SECONDS) OVER (PARTITION BY PR_ID))/60 AS VARCHAR)+':'+CAST((SUM(SECONDS) OVER (PARTITION BY PR_ID))%60 AS VARCHAR) AS SUM_TIME 
FROM
(SELECT 
    PR_ID,
    STEP_ID,
    TYPE,
    DETAIL_MSG,
    IIF(STEP_ID!=1, COALESCE(DATEDIFF(SECOND, LAG(RUN_DTTM) OVER (ORDER BY PR_ID, STEP_ID), RUN_DTTM), 0), 0) SECONDS    
FROM 
LOG.PROCESS WHERE UPPER(NAME) = 'LOADMOVIEDATA') INNER_1
  
select * from log.process order by run_dttm desc
select * from stage.moviedata
select * from log.loading_error

select * from stage.moviedata

select distinct release_year from moviedata.movie   

*/
 