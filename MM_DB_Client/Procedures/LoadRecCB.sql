/*
 -------------------------- MM CB RECCOMMENDER PROCEDURE ------------------------------
|                                                                                      |
| Name: LoadRecCB.sql                                                                  |
| Created: Akos Ujvary                                                                 |
|                                                                                      |
| Parameters:   USERID, ALLROWCNT                                                      |
|                                                                                      |
| Last modified: 2022.09.06   TSQL migrating                                           |
|                2017.11.30   Creation (PostgreSQL)                                    |
 --------------------------------------------------------------------------------------
*/ 

CREATE OR ALTER PROCEDURE control.LoadRecCB(@USERID VARCHAR(10), @CB_TYPE VARCHAR(30), @ALLROWCNT INTEGER)
WITH EXECUTE AS CALLER
AS
BEGIN

/*--- Start Process ---*/
DECLARE @PROCESS_NAME VARCHAR(50);
SET @PROCESS_NAME= 'LoadRecCB';
DECLARE @PROCESS_ID VARCHAR(10);
SELECT @PROCESS_ID=control.f_genprocessid(NEXT VALUE FOR LOG.SEQ_PROCESS_ID)
EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='START', @DETAIL='Start of LoadRecCB procedure',
                          @ADDITIONAL_VARIABLE_NAME_1='USERID', @ADDITIONAL_VARIABLE_VALUE_1=@USERID;
              
DECLARE @THRESHOLD_RATING_COUNTRY NUMERIC;
DECLARE @THRESHOLD_RATING_GLOBAL NUMERIC;

SELECT @THRESHOLD_RATING_COUNTRY=THRESHOLD_RATING_COUNTRY FROM CONTROL.BIAS_SETTING  
SELECT @THRESHOLD_RATING_GLOBAL=THRESHOLD_RATING_GLOBAL FROM CONTROL.BIAS_SETTING WHERE CB_TYPE = @CB_TYPE;

DELETE FROM USERDATA.TMP_REC_CB WHERE USER_ID=@USERID;

INSERT INTO USERDATA.TMP_REC_CB
---------------------------- MAIN SELECT for TMP_REC_CB  ----------------------------------------
SELECT 
  @USERID AS USER_ID,
  INNER_FINAL.TITLE_NM, 
  INNER_FINAL.IMDB_ID, 
  INNER_FINAL.MOVIE_ID,
  INNER_FINAL.COUNTRY_ID,
  INNER_FINAL.COUNTRY_FLG,  
  INNER_FINAL.SUM_SCORE_ACTOR,
  INNER_FINAL.SUM_SCORE_DIRECTOR,
  INNER_FINAL.SUM_SCORE_WRITER,
  INNER_FINAL.SUM_SCORE_GENRE,
  INNER_FINAL.SUM_SCORE_COUNTRY,
  INNER_FINAL.FEATURE_SCORE_ORIG,
  INNER_FINAL.FEATURE_SCORE,
  INNER_FINAL.BIAS_RATING_SCORE_COUNTRY,  
  INNER_FINAL.BIAS_YEAR_SCORE_COUNTRY,
  INNER_FINAL.BIAS_VOTES_SCORE_COUNTRY,
  INNER_FINAL.BIAS_RATING_SCORE_GLOBAL,  
  INNER_FINAL.BIAS_YEAR_SCORE_GLOBAL,
  INNER_FINAL.BIAS_VOTES_SCORE_GLOBAL,
  INNER_FINAL.BIASED_FEATURE_SCORE
  --into  USERDATA.TMP_REC_CB
FROM 
(SELECT INNER_7.*, RANK() OVER (ORDER BY BIASED_FEATURE_SCORE DESC) AS OVERALL_RANK FROM
(SELECT INNER_6.*, (CASE WHEN (COUNTRY_LIMIT IS NULL) THEN 'O' WHEN (COUNTRY_LIMIT>=COUNTRY_RANK) THEN 'Y' ELSE 'N' END) AS COUNTRY_FLG
 FROM
(SELECT INNER_5.*, (FEATURE_SCORE
                    +BIAS_RATING_SCORE_COUNTRY+BIAS_YEAR_SCORE_COUNTRY+BIAS_VOTES_SCORE_COUNTRY
                    +BIAS_RATING_SCORE_GLOBAL+BIAS_YEAR_SCORE_GLOBAL+BIAS_VOTES_SCORE_GLOBAL
) AS BIASED_FEATURE_SCORE FROM 
(SELECT INNER_4.*, RANK() OVER (PARTITION BY COUNTRY_ID ORDER BY (FEATURE_SCORE+BIAS_RATING_SCORE_COUNTRY+BIAS_YEAR_SCORE_COUNTRY+BIAS_VOTES_SCORE_COUNTRY+BIAS_RATING_SCORE_GLOBAL+BIAS_YEAR_SCORE_GLOBAL+BIAS_VOTES_SCORE_GLOBAL) DESC, INNER_4.MOVIE_ID) COUNTRY_RANK
FROM 
(SELECT MD_MOVIE.TITLE_NM, MD_MOVIE.IMDB_ID, INNER_3.*,     
    control.f_ScoreBiasYearLocal('COUNTRY', @CB_TYPE, MD_MOVIE.RELEASE_YEAR, BIAS_COUNTRY.MIN_YEAR, BIAS_COUNTRY.MAX_YEAR) AS BIAS_YEAR_SCORE_COUNTRY,
   -- 0 AS BIAS_YEAR_SCORE_COUNTRY,
    control.f_ScoreBiasVotesLocal('COUNTRY', @CB_TYPE, COALESCE(MD_MOVIE.IMDB_VOTES, 0), COALESCE(MD_MOVIE.TOMATO_USER_REVIEWS, 0), BIAS_COUNTRY.MIN_IMDB_VOTES, BIAS_COUNTRY.AVG_IMDB_VOTES, BIAS_COUNTRY.MIN_TOMATO_VOTES, BIAS_COUNTRY.AVG_TOMATO_VOTES) AS BIAS_VOTES_SCORE_COUNTRY,    
    --0 as BIAS_VOTES_SCORE_COUNTRY,
    control.f_ScoreBiasRatingLocal('COUNTRY', @CB_TYPE, CAST((IMDB_RATING*10) AS NUMERIC), COALESCE(METASCORE,0), COALESCE(TOMATOMETER,0), COALESCE(TOMATO_USER_METER,0), BIAS_COUNTRY.MIN_IMDB_RATING, BIAS_COUNTRY.AVG_IMDB_RATING, BIAS_COUNTRY.WEIGHT_IMDB_RATING, BIAS_COUNTRY.MIN_METASCORE, BIAS_COUNTRY.AVG_METASCORE, BIAS_COUNTRY.WEIGHT_METASCORE, BIAS_COUNTRY.MIN_TOMATOMETER, BIAS_COUNTRY.AVG_TOMATOMETER, BIAS_COUNTRY.WEIGHT_TOMATOMETER, BIAS_COUNTRY.MIN_TOMATO_USER_METER, BIAS_COUNTRY.AVG_TOMATO_USER_METER, BIAS_COUNTRY.WEIGHT_TOMATO_USER_METER) AS BIAS_RATING_SCORE_COUNTRY,
    -- 0 AS BIAS_RATING_SCORE_country,

    control.f_ScoreBiasYearLocal('GLOBAL', @CB_TYPE, MD_MOVIE.RELEASE_YEAR, BIAS_GLOBAL.MIN_YEAR, BIAS_GLOBAL.MAX_YEAR) AS BIAS_YEAR_SCORE_GLOBAL,
    --0 AS BIAS_YEAR_SCORE_global,
    control.f_ScoreBiasVotesLocal('GLOBAL', @CB_TYPE, COALESCE(MD_MOVIE.IMDB_VOTES, 0), COALESCE(MD_MOVIE.TOMATO_USER_REVIEWS, 0), BIAS_GLOBAL.MIN_IMDB_VOTES, BIAS_GLOBAL.AVG_IMDB_VOTES, BIAS_GLOBAL.MIN_TOMATO_VOTES, BIAS_GLOBAL.AVG_TOMATO_VOTES) AS BIAS_VOTES_SCORE_GLOBAL,    
    --0 as BIAS_VOTES_SCORE_GLOBAL,
    control.f_ScoreBiasRatingLocal('GLOBAL', @CB_TYPE, CAST((IMDB_RATING*10) AS NUMERIC), COALESCE(METASCORE,0), COALESCE(TOMATOMETER,0), COALESCE(TOMATO_USER_METER,0), BIAS_GLOBAL.MIN_IMDB_RATING, BIAS_GLOBAL.AVG_IMDB_RATING, BIAS_GLOBAL.WEIGHT_IMDB_RATING, BIAS_GLOBAL.MIN_METASCORE, BIAS_GLOBAL.AVG_METASCORE, BIAS_GLOBAL.WEIGHT_METASCORE, BIAS_GLOBAL.MIN_TOMATOMETER, BIAS_GLOBAL.AVG_TOMATOMETER, BIAS_GLOBAL.WEIGHT_TOMATOMETER, BIAS_GLOBAL.MIN_TOMATO_USER_METER, BIAS_GLOBAL.AVG_TOMATO_USER_METER, BIAS_GLOBAL.WEIGHT_TOMATO_USER_METER) AS BIAS_RATING_SCORE_GLOBAL
    --0 AS BIAS_RATING_SCORE_GLOBAL
FROM

(SELECT INNER_2.MOVIE_ID,
      (          
          COALESCE(SUM_SCORE_ACTOR,0) + 
          COALESCE(SUM_SCORE_DIRECTOR,0) + 
          COALESCE(SUM_SCORE_WRITER,0) + 
          COALESCE(SUM_SCORE_GENRE,0) + 
          COALESCE(SUM_SCORE_COUNTRY,0)) AS FEATURE_SCORE_ORIG,
      CONTROL.F_FEATURESCORE(@CB_TYPE, SUM_SCORE_ACTOR, SUM_SCORE_DIRECTOR, SUM_SCORE_WRITER, SUM_SCORE_GENRE, SUM_SCORE_COUNTRY) AS FEATURE_SCORE,
      INNER_2.SUM_SCORE_ACTOR,
      INNER_2.SUM_SCORE_DIRECTOR,
      INNER_2.SUM_SCORE_WRITER,
      INNER_2.SUM_SCORE_GENRE,
      INNER_2.SUM_SCORE_COUNTRY,
      INNER_2.COUNTRY_ID,
      CNTRY_LIMIT.COUNTRY_LIMIT      
FROM
(SELECT INNER_1.MOVIE_ID, 
       NTILE(100) OVER (ORDER BY SUM(INNER_1.SCORE_ACTOR)) AS SUM_SCORE_ACTOR,
       NTILE(100) OVER (ORDER BY SUM(INNER_1.SCORE_DIRECTOR)) AS SUM_SCORE_DIRECTOR,
       NTILE(100) OVER (ORDER BY SUM(INNER_1.SCORE_WRITER)) AS SUM_SCORE_WRITER,
       NTILE(100) OVER (ORDER BY SUM(INNER_1.SCORE_GENRE)) AS SUM_SCORE_GENRE,
       NTILE(100) OVER (ORDER BY SUM(INNER_1.SCORE_COUNTRY)) AS SUM_SCORE_COUNTRY,
       SUBSTRING(MIN(INNER_1.CONC_COUNTRY_MF_ID_COUNTRY_ID),11, 6) AS COUNTRY_ID
FROM
(SELECT MD_MF.MOVIE_ID,
       UD_UF_ACTOR.SCORE AS SCORE_ACTOR,
       UD_UF_DIRECTOR.SCORE AS SCORE_DIRECTOR,
       UD_UF_WRITER.SCORE AS SCORE_WRITER,
       UD_UF_GENRE.SCORE AS SCORE_GENRE,
       UD_UF_COUNTRY.SCORE AS SCORE_COUNTRY,
       CONCAT_WS('_',MD_MF_CNTRY.MOVIE_FEATURE_ID,MD_MF_CNTRY.FEATURE_ID) AS CONC_COUNTRY_MF_ID_COUNTRY_ID          

FROM 
  (SELECT MF.* FROM MOVIEDATA.MOVIEFEATURE MF LEFT JOIN (SELECT * FROM USERDATA.RATING WHERE USER_ID=@USERID) UR ON UR.MOVIE_ID = MF.MOVIE_ID WHERE UR.MOVIE_ID IS NULL) MD_MF

LEFT JOIN (SELECT * FROM USERDATA.USERFEATURE WHERE FEATURE_CD='A' AND USER_ID=@USERID) UD_UF_ACTOR  ON MD_MF.FEATURE_CD = 'A' AND MD_MF.FEATURE_ID = UD_UF_ACTOR.FEATURE_ID
LEFT JOIN (SELECT * FROM USERDATA.USERFEATURE WHERE FEATURE_CD='D' AND USER_ID=@USERID) UD_UF_DIRECTOR  ON MD_MF.FEATURE_CD = 'D' AND MD_MF.FEATURE_ID = UD_UF_DIRECTOR.FEATURE_ID
LEFT JOIN (SELECT * FROM USERDATA.USERFEATURE WHERE FEATURE_CD='W' AND USER_ID=@USERID) UD_UF_WRITER  ON MD_MF.FEATURE_CD = 'W' AND MD_MF.FEATURE_ID = UD_UF_WRITER.FEATURE_ID
LEFT JOIN (SELECT * FROM USERDATA.USERFEATURE WHERE FEATURE_CD='G' AND USER_ID=@USERID) UD_UF_GENRE  ON MD_MF.FEATURE_CD = 'G' AND MD_MF.FEATURE_ID = UD_UF_GENRE.FEATURE_ID
LEFT JOIN (SELECT * FROM USERDATA.USERFEATURE WHERE FEATURE_CD='C' AND USER_ID=@USERID) UD_UF_COUNTRY  ON MD_MF.FEATURE_CD = 'C' AND MD_MF.FEATURE_ID = UD_UF_COUNTRY.FEATURE_ID
--LEFT JOIN (SELECT * FROM MOVIEDATA.MOVIEFEATURE WHERE FEATURE_CD='C') MD_MF_CNTRY ON MD_MF_CNTRY.MOVIE_ID=MD_MF.MOVIE_ID
LEFT JOIN (SELECT FC_2.* FROM (SELECT FC_1.*, RANK() OVER (PARTITION BY MOVIE_ID ORDER BY MOVIE_FEATURE_ID) AS RNK FROM MOVIEDATA.MOVIEFEATURE FC_1 WHERE FEATURE_CD='C') FC_2 WHERE RNK=1) MD_MF_CNTRY ON MD_MF_CNTRY.MOVIE_ID=MD_MF.MOVIE_ID

WHERE ( UD_UF_ACTOR.SCORE IS NOT NULL OR 
        UD_UF_DIRECTOR.SCORE IS NOT NULL OR 
        UD_UF_WRITER.SCORE IS NOT NULL OR 
        UD_UF_GENRE.SCORE IS NOT NULL OR 
        UD_UF_COUNTRY.SCORE IS NOT NULL  
  ) 
) INNER_1 GROUP BY MOVIE_ID) INNER_2 

/* ----------------------------------------------------  COUNTRY LIMIT ------------------------------------------------------------*/

LEFT JOIN 
(SELECT FEATURE_ID, CAST(ROUND((SCORE / SUMALL * ALL_MOVIE_CNT),0) AS NUMERIC) AS COUNTRY_LIMIT FROM
(SELECT SCORE, FEATURE_ID, (@ALLROWCNT*0.7) AS ALL_MOVIE_CNT, SUM(SCORE) OVER () AS SUMALL 
   FROM USERDATA.USERFEATURE WHERE FEATURE_CD = 'C' AND USER_ID=@USERID) INNER_1) CNTRY_LIMIT 
   ON CNTRY_LIMIT.FEATURE_ID=INNER_2.COUNTRY_ID
/* ----------------------------------------------------------------------------------------------------------------------------*/


) INNER_3 
LEFT JOIN MOVIEDATA.MOVIE MD_MOVIE ON MD_MOVIE.MOVIE_ID=INNER_3.MOVIE_ID

 
LEFT JOIN 
(
----------------------------------------- BIAS START COUNTRY ---------------------------------------------  
------ YEARS ------------------------------------
   SELECT 
      YEARS.FEATURE_ID,
      YEARS.AVG_RATING,
      MIN_YEAR, MAX_YEAR,
      MIN_IMDB_VOTES, AVG_IMDB_VOTES, MIN_TOMATO_VOTES, AVG_TOMATO_VOTES,
      MIN_IMDB_RATING, AVG_IMDB_RATING, WEIGHT_IMDB_RATING, MIN_METASCORE, AVG_METASCORE, WEIGHT_METASCORE, MIN_TOMATOMETER, AVG_TOMATOMETER, WEIGHT_TOMATOMETER, MIN_TOMATO_USER_METER, AVG_TOMATO_USER_METER, WEIGHT_TOMATO_USER_METER 
    FROM
  (SELECT CAST(ROUND(AVG(RATING),0) AS NUMERIC) AS AVG_RATING, FEATURE_ID, MIN(RELEASE_YEAR)-5 AS MIN_YEAR, MAX(RELEASE_YEAR)+5 AS MAX_YEAR FROM USERDATA.RATING UR
   LEFT JOIN MOVIEDATA.MOVIE MM
   ON MM.MOVIE_ID=UR.MOVIE_ID
   LEFT JOIN MOVIEDATA.MOVIEFEATURE MF
   ON MF.MOVIE_ID=MM.MOVIE_ID
   WHERE FEATURE_CD='C' AND USER_ID=@USERID AND RATING>=@THRESHOLD_RATING_COUNTRY
   GROUP BY FEATURE_ID)YEARS

  ------ VOTES ------------------------------------
  LEFT JOIN
  (SELECT  FEATURE_ID,           
           CAST(ROUND(MIN(IMDB_VOTES)-(MIN(IMDB_VOTES)/3),0) AS NUMERIC) AS MIN_IMDB_VOTES,
           CAST(ROUND(MIN(TOMATO_USER_REVIEWS)-(MIN(TOMATO_USER_REVIEWS)/3),0) AS NUMERIC) AS MIN_TOMATO_VOTES,
           CAST(ROUND(AVG(IMDB_VOTES),0) AS NUMERIC) AS AVG_IMDB_VOTES,
           CAST(ROUND(AVG(TOMATO_USER_REVIEWS),0) AS NUMERIC) AS AVG_TOMATO_VOTES
   FROM USERDATA.RATING UR
   LEFT JOIN MOVIEDATA.MOVIE MM
   ON MM.MOVIE_ID=UR.MOVIE_ID
   LEFT JOIN MOVIEDATA.MOVIEFEATURE MF
   ON MF.MOVIE_ID=MM.MOVIE_ID
   WHERE FEATURE_CD='C' AND USER_ID=@USERID AND RATING>=@THRESHOLD_RATING_COUNTRY
   GROUP BY FEATURE_ID) VOTES
    ON YEARS.FEATURE_ID=VOTES.FEATURE_ID
     
   -- RATING --------------------------------------
     
   LEFT JOIN
   (
     SELECT 
          IMR.FEATURE_ID, MIN_IMDB_RATING, AVG_IMDB_RATING, WEIGHT_IMDB_RATING, MIN_METASCORE, AVG_METASCORE, WEIGHT_METASCORE, MIN_TOMATOMETER, AVG_TOMATOMETER, WEIGHT_TOMATOMETER, MIN_TOMATO_USER_METER, AVG_TOMATO_USER_METER, WEIGHT_TOMATO_USER_METER
     FROM 
   (SELECT  FEATURE_ID, 
            CAST(ROUND(AVG(RATING),0) AS NUMERIC) AS AVG_RATING,
            CAST(MIN(IMDB_RATING*10)-5 AS NUMERIC) AS MIN_IMDB_RATING,
            CAST(ROUND(AVG(IMDB_RATING*10),0) AS NUMERIC) AS AVG_IMDB_RATING,
            10-ABS(1-(AVG(RATING)/IIF((AVG(IMDB_RATING)*10)=0,1,(AVG(IMDB_RATING)*10)))) AS WEIGHT_IMDB_RATING
   FROM USERDATA.RATING UR
   LEFT JOIN MOVIEDATA.MOVIE MM
   ON MM.MOVIE_ID=UR.MOVIE_ID
   LEFT JOIN MOVIEDATA.MOVIEFEATURE MF
   ON MF.MOVIE_ID=MM.MOVIE_ID
   WHERE FEATURE_CD='C' AND USER_ID=@USERID AND RATING>=@THRESHOLD_RATING_COUNTRY
   GROUP BY FEATURE_ID) IMR
     
   LEFT JOIN
   (SELECT  FEATURE_ID, 
            CAST(ROUND(AVG(RATING),0) AS NUMERIC) AS AVG_RATING,
            MIN(METASCORE)-10 AS MIN_METASCORE,
            CAST(ROUND(AVG(METASCORE),0) AS NUMERIC) AS AVG_METASCORE,
            10-ABS(1-(AVG(RATING)/IIF((AVG(METASCORE)*10)=0,1,(AVG(METASCORE)*10)))) AS WEIGHT_METASCORE
   FROM USERDATA.RATING UR
   LEFT JOIN MOVIEDATA.MOVIE MM
   ON MM.MOVIE_ID=UR.MOVIE_ID
   LEFT JOIN MOVIEDATA.MOVIEFEATURE MF
   ON MF.MOVIE_ID=MM.MOVIE_ID
   WHERE FEATURE_CD='C' AND USER_ID=@USERID AND RATING>=@THRESHOLD_RATING_COUNTRY
   AND METASCORE IS NOT NULL
   GROUP BY FEATURE_ID) META
   ON IMR.FEATURE_ID=META.FEATURE_ID


   LEFT JOIN(
   SELECT  FEATURE_ID, 
            CAST(ROUND(AVG(RATING),0) AS NUMERIC) AS AVG_RATING,
            MIN(TOMATOMETER)-10 AS MIN_TOMATOMETER,
            CAST(ROUND(AVG(TOMATOMETER),0) AS NUMERIC) AS AVG_TOMATOMETER,
            10-ABS(1-(AVG(RATING)/IIF((AVG(TOMATOMETER)*10)=0,1,(AVG(TOMATOMETER)*10)))) AS WEIGHT_TOMATOMETER
   FROM USERDATA.RATING UR
   LEFT JOIN MOVIEDATA.MOVIE MM
   ON MM.MOVIE_ID=UR.MOVIE_ID
   LEFT JOIN MOVIEDATA.MOVIEFEATURE MF
   ON MF.MOVIE_ID=MM.MOVIE_ID
   WHERE FEATURE_CD='C' AND USER_ID=@USERID AND RATING>=@THRESHOLD_RATING_COUNTRY
   AND METASCORE IS NOT NULL
   GROUP BY FEATURE_ID) TOM
   ON IMR.FEATURE_ID=TOM.FEATURE_ID

   LEFT JOIN(
   SELECT  FEATURE_ID, 
            CAST(ROUND(AVG(RATING),0) AS NUMERIC) AS AVG_RATING,
            MIN(TOMATO_USER_METER)-10 AS MIN_TOMATO_USER_METER,
            CAST(ROUND(AVG(TOMATO_USER_METER),0) AS NUMERIC) AS AVG_TOMATO_USER_METER,
            10-ABS(1-(AVG(RATING)/IIF((AVG(TOMATO_USER_METER)*10)=0,1,(AVG(TOMATO_USER_METER)*10)))) AS WEIGHT_TOMATO_USER_METER
   FROM USERDATA.RATING UR
   LEFT JOIN MOVIEDATA.MOVIE MM
   ON MM.MOVIE_ID=UR.MOVIE_ID
   LEFT JOIN MOVIEDATA.MOVIEFEATURE MF
   ON MF.MOVIE_ID=MM.MOVIE_ID
   WHERE FEATURE_CD='C' AND USER_ID=@USERID AND RATING>=@THRESHOLD_RATING_COUNTRY
   AND METASCORE IS NOT NULL
   GROUP BY FEATURE_ID) TOMUSER
   ON IMR.FEATURE_ID=TOMUSER.FEATURE_ID
   ) RATING
  ON YEARS.FEATURE_ID = RATING.FEATURE_ID

----------------------------------------- BIAS END COUNTRY ---------------------------------------------
 ) BIAS_COUNTRY ON BIAS_COUNTRY.FEATURE_ID=INNER_3.COUNTRY_ID
LEFT JOIN 
 ----------------------------------------- BIAS START GLOBAL ------------------------------------------
  (SELECT 
      YEARS.AVG_RATING,
      MIN_YEAR, MAX_YEAR,
      MIN_IMDB_VOTES, AVG_IMDB_VOTES, MIN_TOMATO_VOTES, AVG_TOMATO_VOTES,
      MIN_IMDB_RATING, AVG_IMDB_RATING, WEIGHT_IMDB_RATING, MIN_METASCORE, AVG_METASCORE, WEIGHT_METASCORE, MIN_TOMATOMETER, AVG_TOMATOMETER, WEIGHT_TOMATOMETER, MIN_TOMATO_USER_METER, AVG_TOMATO_USER_METER, WEIGHT_TOMATO_USER_METER 
    FROM
  (SELECT CAST(ROUND(AVG(RATING),0) AS NUMERIC) AS AVG_RATING, MIN(RELEASE_YEAR)-5 AS MIN_YEAR, MAX(RELEASE_YEAR)+5 AS MAX_YEAR FROM USERDATA.RATING UR
   LEFT JOIN MOVIEDATA.MOVIE MM
   ON MM.MOVIE_ID=UR.MOVIE_ID
   WHERE USER_ID=@USERID AND RATING>=@THRESHOLD_RATING_GLOBAL)YEARS

  ------ VOTES ------------------------------------
  LEFT JOIN
  (SELECT  CAST(ROUND(MIN(IMDB_VOTES)-(MIN(IMDB_VOTES)/3),0) AS NUMERIC) AS MIN_IMDB_VOTES,
           CAST(ROUND(MIN(TOMATO_USER_REVIEWS)-(MIN(TOMATO_USER_REVIEWS)/3),0) AS NUMERIC) AS MIN_TOMATO_VOTES,
           CAST(ROUND(AVG(IMDB_VOTES),0) AS NUMERIC) AS AVG_IMDB_VOTES,
           CAST(ROUND(AVG(TOMATO_USER_REVIEWS),0) AS NUMERIC) AS AVG_TOMATO_VOTES
   FROM USERDATA.RATING UR
   LEFT JOIN MOVIEDATA.MOVIE MM
   ON MM.MOVIE_ID=UR.MOVIE_ID
   WHERE USER_ID=@USERID AND RATING>=@THRESHOLD_RATING_GLOBAL) VOTES
    ON 1=1
     
   -- RATING --------------------------------------
     
   LEFT JOIN
   (
     SELECT 
         MIN_IMDB_RATING, AVG_IMDB_RATING, WEIGHT_IMDB_RATING, MIN_METASCORE, AVG_METASCORE, WEIGHT_METASCORE, MIN_TOMATOMETER, AVG_TOMATOMETER, WEIGHT_TOMATOMETER, MIN_TOMATO_USER_METER, AVG_TOMATO_USER_METER, WEIGHT_TOMATO_USER_METER
     FROM 
   (SELECT  CAST(ROUND(AVG(RATING),0) AS NUMERIC) AS AVG_RATING,
            CAST(MIN(IMDB_RATING*10)-5 AS NUMERIC) AS MIN_IMDB_RATING,
            CAST(ROUND(AVG(IMDB_RATING*10),0) AS NUMERIC) AS AVG_IMDB_RATING,
            10-ABS(1-(AVG(RATING)/IIF((AVG(IMDB_RATING)*10)=0,1,(AVG(IMDB_RATING)*10)))) AS WEIGHT_IMDB_RATING
   FROM USERDATA.RATING UR
   LEFT JOIN MOVIEDATA.MOVIE MM
   ON MM.MOVIE_ID=UR.MOVIE_ID
   WHERE USER_ID=@USERID AND RATING>=@THRESHOLD_RATING_GLOBAL 
   AND MM.IMDB_RATING!=0) IMR
     
   LEFT JOIN
   (SELECT  CAST(ROUND(AVG(RATING),0) AS NUMERIC) AS AVG_RATING,
            MIN(METASCORE)-10 AS MIN_METASCORE,
            CAST(ROUND(AVG(METASCORE),0) AS NUMERIC) AS AVG_METASCORE,
            10-ABS(1-(AVG(RATING)/IIF((AVG(METASCORE)*10)=0,1,(AVG(METASCORE)*10)))) AS WEIGHT_METASCORE
   FROM USERDATA.RATING UR
   LEFT JOIN MOVIEDATA.MOVIE MM
   ON MM.MOVIE_ID=UR.MOVIE_ID
   WHERE USER_ID=@USERID AND RATING>=@THRESHOLD_RATING_GLOBAL
   AND MM.METASCORE !=0) META
   ON 1=1


   LEFT JOIN(
   SELECT   CAST(ROUND(AVG(RATING),0) AS NUMERIC) AS AVG_RATING,
            MIN(TOMATOMETER)-10 AS MIN_TOMATOMETER,
            CAST(ROUND(AVG(TOMATOMETER),0) AS NUMERIC) AS AVG_TOMATOMETER,
            10-ABS(1-(AVG(RATING)/IIF((AVG(TOMATOMETER)*10)=0,1,(AVG(TOMATOMETER)*10)))) AS WEIGHT_TOMATOMETER
   FROM USERDATA.RATING UR
   LEFT JOIN MOVIEDATA.MOVIE MM
   ON MM.MOVIE_ID=UR.MOVIE_ID
   WHERE USER_ID=@USERID AND RATING>=@THRESHOLD_RATING_GLOBAL
   AND MM.TOMATOMETER !=0) TOM
   ON 1=1

   LEFT JOIN(
   SELECT  CAST(ROUND(AVG(RATING),0) AS NUMERIC) AS AVG_RATING,
            MIN(TOMATO_USER_METER)-10 AS MIN_TOMATO_USER_METER,
            CAST(ROUND(AVG(TOMATO_USER_METER),0) AS NUMERIC) AS AVG_TOMATO_USER_METER,
            10-ABS(1-(AVG(RATING)/IIF((AVG(TOMATO_USER_METER)*10)=0,1,(AVG(TOMATO_USER_METER)*10)))) AS WEIGHT_TOMATO_USER_METER
   FROM USERDATA.RATING UR
   LEFT JOIN MOVIEDATA.MOVIE MM
   ON MM.MOVIE_ID=UR.MOVIE_ID
   LEFT JOIN MOVIEDATA.MOVIEFEATURE MF
   ON MF.MOVIE_ID=MM.MOVIE_ID
   WHERE USER_ID=@USERID AND RATING>=@THRESHOLD_RATING_GLOBAL
   AND MM.TOMATO_USER_METER !=0) TOMUSER
   ON 1=1
   ) RATING
  ON 1 = 1
)
 ------------------------------------------ BIAS END GLOBAL -----------------------------------------
 BIAS_GLOBAL ON 1=1
)INNER_4 

) INNER_5)INNER_6)INNER_7
WHERE COUNTRY_FLG != 'N'
)INNER_FINAL 
WHERE OVERALL_RANK <=@ALLROWCNT;
---------------------------------- end TMP_REC_CB ----------------------------------------

DELETE FROM USERDATA.RECOMMENDATION WHERE USER_ID=@USERID;

INSERT INTO USERDATA.RECOMMENDATION
SELECT       
      control.f_genrecommendationid(NEXT VALUE FOR USERDATA.SEQ_RECOMMENDATION_ID) AS REC_ID,
      @USERID AS USER_ID,
      MOVIE_ID,
      IMDB_ID,
      'CB_1' AS REC_TYPE,
      BIASED_FEATURE_SCORE AS REC_SCORE,
      CURRENT_TIMESTAMP
 FROM USERDATA.TMP_REC_CB 
 WHERE USER_ID=@USERID;


EXEC CONTROL.LOG_PROCESS @PR_ID=@PROCESS_ID, @NAME=@PROCESS_NAME, @TYPE='END', @DETAIL='End of LoadRecCB procedure',
                                @ADDITIONAL_VARIABLE_NAME_1='USERID', @ADDITIONAL_VARIABLE_VALUE_1=@USERID;
RETURN 1;
END

/*
testing
 
exec  control.LoadRecCB @USERID='USE000005', @CB_TYPE='BASIC_1', @ALLROWCNT=20;
 
select * from USERDATA.TMP_REC_CB where user_id='USE000005'

select * from log.process
select * from userdata.RECOMMENDATION  
select c.country_nm, cb.* from userdata.TMP_REC_CB cb left join moviedata.country c on c.country_id=cb.country_id where user_id='USE000001'  



*/
